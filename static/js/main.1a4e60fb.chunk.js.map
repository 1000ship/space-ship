{"version":3,"sources":["Utils/SpaceshipSocket.js","App.js","Utils/utility.js","serviceWorker.js","index.js"],"names":["SpaceshipSocket","host","port","onUserListChange","onUserMove","this","socket","io","id","userList","emit","eventName","args","on","console","log","push","exitIndex","findIndex","each","splice","list","x","y","Container","styled","div","UserMouse","App","useState","userState","setUserState","useEffect","result","forEach","who","moveTo","func","interval","_id","setTimeout","throttle","onMouseMove","e","pageX","pageY","map","user","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a4e60fb.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nexport default function SpaceshipSocket(host, port, {\n  onUserListChange, onUserMove\n}) {\n  this.socket = io(`http://${host}:${port}`);\n  this.id = \"\"\n  this.userList = [];\n\n  this.emit = (eventName, ...args) => {\n    this.socket.emit(eventName, ...args)\n  }\n\n  this.socket.on(\"connect\", () => {\n    console.log(\"ID\", this.socket.id);\n    this.socket.emit(\"enter\", this.socket.id);\n    this.id = this.socket.id;\n  });\n\n  this.socket.on(\"enter\", (id) => {\n    console.log(\"Enter\", id);\n    this.userList.push(id);\n    if(onUserListChange) onUserListChange(this.userList)\n  });\n\n  this.socket.on(\"exit\", (id) => {\n    console.log(\"Exit\", id);\n    const exitIndex = this.userList.findIndex(\n      (each) => each.id === this.socket.id\n    );\n    this.userList.splice(exitIndex, 1);\n    if(onUserListChange) onUserListChange(this.userList)\n  });\n\n  this.socket.on(\"user-list\", (list) => {\n    this.userList = list;\n    if(onUserListChange) onUserListChange(this.userList)\n  });\n\n  this.socket.on(\"user-move\", (id, x,y) => {\n    if(onUserMove) onUserMove(id, x, y)\n  })\n}\n","import React, { useState, useEffect } from \"react\";\nimport SpaceshipSocket from \"./Utils/SpaceshipSocket\";\nimport styled from \"styled-components\";\nimport { throttle } from \"./Utils/utility\";\n\nconst Container = styled.div`\n  width: 100vw;\n  height: 100vh;\n`;\n\nconst UserMouse = styled.div`\n  position: fixed;\n  left: ${({ x }) => x}px;\n  top: ${({ y }) => y}px;\n`;\n\nvar socket;\n\nfunction App() {\n  const [userState, setUserState] = useState([]);\n\n  useEffect(() => {\n    socket = new SpaceshipSocket(\n      \"ec2-3-137-150-69.us-east-2.compute.amazonaws.com\",\n      4000,\n      {\n        onUserListChange,\n        onUserMove,\n      }\n    );\n  }, []);\n\n  const onUserListChange = (list) => {\n    setUserState((userState) => {\n      const result = [...userState];\n      list.forEach((id) => {\n        const where = result.findIndex((each) => each.id === id);\n        if (where === -1) result.push({ id, x: 0, y: 0 });\n      });\n      return result;\n    });\n  };\n\n  const onUserMove = (id, x, y) => {\n    console.log(id, x, y);\n    setUserState((userState) => {\n      const who = userState.findIndex((each) => each.id === id);\n      const result = [...userState];\n      if (who === -1) return result;\n      result[who].x = x;\n      result[who].y = y;\n      return result;\n    });\n  };\n\n  const moveTo = throttle((x, y) => {\n    socket.emit(\"user-move\", x, y);\n  }, 100);\n\n  return (\n    <Container onMouseMove={(e) => moveTo(e.pageX, e.pageY)}>\n      {userState.map((user) => (\n        <UserMouse key={user.id} x={user.x} y={user.y}>\n          {user.id}\n        </UserMouse>\n      ))}\n    </Container>\n  );\n}\n\nexport default App;\n","export const throttle = (func, interval) => {\n  var _id = null;\n  return (...args) => {\n    if (_id === null)\n      _id = setTimeout(() => {\n        func(...args);\n        _id = null;\n      }, interval);\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}